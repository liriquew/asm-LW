.686
.model flat, c 
OPTION CASEMAP:NONE

.code

;---------------------------------------------------------------------------------
;      Инициализирующая процедура библиотеки.
;---------------------------------------------------------------------------------
DllMain proc hInstDLL:DWORD, reason:DWORD, unused:DWORD 
      mov eax, -1
      ret
DllMain endp

;---------------------------------------------------------------------------------
;                Функция импортируемая из библиотеки
;---------------------------------------------------------------------------------
; void ODDWORDS(char* source, char* dest)
; Исх строка - [EBP+08]
; Новая строка - [EBP+12]
ODDWORDS PROC
    PUSH ebp            ; сохранение указателя базы
    MOV ebp, esp        ; настройка ebp
    PUSH esi
    PUSH edi

    MOV esi, [ebp+8]    ; указатель на source
    MOV edi, [ebp+12]   ; указатель на dest
    XOR dh, dh          ; обнулим dh, dh = 0 - добавляем, dh != 0 - не добавляем
    XOR al, al          ; обнулим al, al = 1 - было слово, al = 0 - не было слова

L1: 
    MOV dl, [esi]       ; взяли новый символ
    INC esi             ; переход на следующий символ
    CMP dl, 32          ; если пробел
    JE CSS              ; change space state
    CMP dl, 0           ; если перебрали всю строку (встретили символ конца строки)
    JE ACC              
    JMP WGP             ; если не пробел и есть куда рости то переход в word get process

    ; изменение состояния, добавление/пропуск слова
CSS:
    CMP al, 0           ; если слово еще не было встречено (много пробелов подряд)
    JE L1               ; тогда continue, т.к. тут оказываемся только если встретили пробел
    XOR al, al          ; но если слово было
    NOT dh              ; и поменяем 0 -> 1, 1 -> 0
    CMP dh, 0           ; проверяем в каком состоянии находмся
    JE L1               ; если перешли в состояние, в котором не добавляем (dh = 0)
    MOV byte ptr [edi], 32  ; добавим пробел
    INC edi             ; edi++
    JMP L1              ; переход на следующую итерацию

    ; добавление / пропуск слова (word get process)
WGP:
    OR al, 1            ; отмечаем что встретили слово
    CMP dh, 0           ; проверяем, добавляем ли текущее слово
    JNE L1              ; если dh != 0 то пропускаем (continue)
    MOV [edi], dl       ; по адресу edi записали символ из dl
    INC edi             ; edi++
    JMP L1              ; переход к следующей итерации

    ; конец
ACC:
    MOV byte ptr [edi], 0
    POP edi
    POP esi
    MOV esp, ebp
    POP ebp
    RET
ODDWORDS ENDP
END DllMain
